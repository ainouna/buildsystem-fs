--- a/gst/gstbufferpool.c
+++ b/gst/gstbufferpool.c
@@ -218,7 +218,7 @@
 {
   GstBufferPool *result;
 
-  result = g_object_newv (GST_TYPE_BUFFER_POOL, 0, NULL);
+  result = g_object_new (GST_TYPE_BUFFER_POOL, NULL);
   GST_DEBUG_OBJECT (result, "created new buffer pool");
 
   return result;
--- a/gst/gstbus.c
+++ b/gst/gstbus.c
@@ -284,7 +284,7 @@
 {
   GstBus *result;
 
-  result = g_object_newv (gst_bus_get_type (), 0, NULL);
+  result = g_object_new (gst_bus_get_type (), NULL);
   GST_DEBUG_OBJECT (result, "created new bus");
 
   return result;
--- a/gst/gstdeviceproviderfactory.c
+++ b/gst/gstdeviceproviderfactory.c
@@ -196,9 +196,7 @@
     return TRUE;
   }
 
-  factory =
-      GST_DEVICE_PROVIDER_FACTORY_CAST (g_object_newv
-      (GST_TYPE_DEVICE_PROVIDER_FACTORY, 0, NULL));
+  factory = g_object_new (GST_TYPE_DEVICE_PROVIDER_FACTORY, NULL);
   gst_plugin_feature_set_name (GST_PLUGIN_FEATURE_CAST (factory), name);
   GST_LOG_OBJECT (factory, "Created new device providerfactory for type %s",
       g_type_name (type));
@@ -283,8 +281,7 @@
   /* create an instance of the device provider, cast so we don't assert on NULL
    * also set name as early as we can
    */
-  device_provider = GST_DEVICE_PROVIDER_CAST (g_object_newv (factory->type, 0,
-          NULL));
+  device_provider = g_object_new (factory->type, NULL);
   if (G_UNLIKELY (device_provider == NULL))
     goto no_device_provider;
 
--- a/gst/gstdynamictypefactory.c
+++ b/gst/gstdynamictypefactory.c
@@ -123,9 +123,7 @@
 {
   GstDynamicTypeFactory *factory;
 
-  factory =
-      GST_DYNAMIC_TYPE_FACTORY_CAST (g_object_newv
-      (GST_TYPE_DYNAMIC_TYPE_FACTORY, 0, NULL));
+  factory = g_object_new (GST_TYPE_DYNAMIC_TYPE_FACTORY, NULL);
   gst_plugin_feature_set_name (GST_PLUGIN_FEATURE_CAST (factory), name);
   GST_LOG_OBJECT (factory, "Created new dynamictypefactory for type %s", name);
 
--- a/gst/gstelementfactory.c
+++ b/gst/gstelementfactory.c
@@ -231,9 +231,7 @@
     return TRUE;
   }
 
-  factory =
-      GST_ELEMENT_FACTORY_CAST (g_object_newv (GST_TYPE_ELEMENT_FACTORY, 0,
-          NULL));
+  factory = g_object_new (GST_TYPE_ELEMENT_FACTORY, NULL);
   gst_plugin_feature_set_name (GST_PLUGIN_FEATURE_CAST (factory), name);
   GST_LOG_OBJECT (factory, "Created new elementfactory for type %s",
       g_type_name (type));
@@ -370,10 +367,9 @@
    * also set name as early as we can
    */
   if (name)
-    element =
-        GST_ELEMENT_CAST (g_object_new (factory->type, "name", name, NULL));
+    element = g_object_new (factory->type, "name", name, NULL);
   else
-    element = GST_ELEMENT_CAST (g_object_newv (factory->type, 0, NULL));
+    element = g_object_new (factory->type, NULL);
   if (G_UNLIKELY (element == NULL))
     goto no_element;
 
--- a/gst/gstplugin.c
+++ b/gst/gstplugin.c
@@ -219,7 +219,7 @@
   g_return_val_if_fail (_gst_plugin_inited != FALSE, FALSE);
 
   GST_LOG ("attempting to load static plugin \"%s\" now...", name);
-  plugin = g_object_newv (GST_TYPE_PLUGIN, 0, NULL);
+  plugin = g_object_new (GST_TYPE_PLUGIN, NULL);
   if (gst_plugin_register_func (plugin, &desc, NULL) != NULL) {
     GST_INFO ("registered static plugin \"%s\"", name);
     res = gst_registry_add_plugin (gst_registry_get (), plugin);
@@ -286,7 +286,7 @@
   g_return_val_if_fail (_gst_plugin_inited != FALSE, FALSE);
 
   GST_LOG ("attempting to load static plugin \"%s\" now...", name);
-  plugin = g_object_newv (GST_TYPE_PLUGIN, 0, NULL);
+  plugin = g_object_new (GST_TYPE_PLUGIN, NULL);
   if (gst_plugin_register_func (plugin, &desc, user_data) != NULL) {
     GST_INFO ("registered static plugin \"%s\"", name);
     res = gst_registry_add_plugin (gst_registry_get (), plugin);
@@ -780,7 +780,7 @@
   }
 
   if (new_plugin) {
-    plugin = g_object_newv (GST_TYPE_PLUGIN, 0, NULL);
+    plugin = g_object_new (GST_TYPE_PLUGIN, NULL);
     plugin->file_mtime = file_status.st_mtime;
     plugin->file_size = file_status.st_size;
     plugin->filename = g_strdup (filename);
--- a/gst/gstpluginloader.c
+++ b/gst/gstpluginloader.c
@@ -339,7 +339,7 @@
 plugin_loader_create_blacklist_plugin (GstPluginLoader * l,
     PendingPluginEntry * entry)
 {
-  GstPlugin *plugin = g_object_newv (GST_TYPE_PLUGIN, 0, NULL);
+  GstPlugin *plugin = g_object_new (GST_TYPE_PLUGIN, NULL);
 
   plugin->filename = g_strdup (entry->filename);
   plugin->file_mtime = entry->file_mtime;
--- a/gst/gstregistry.c
+++ b/gst/gstregistry.c
@@ -346,7 +346,7 @@
 
   g_mutex_lock (&_gst_registry_mutex);
   if (G_UNLIKELY (!_gst_registry_default)) {
-    _gst_registry_default = g_object_newv (GST_TYPE_REGISTRY, 0, NULL);
+    _gst_registry_default = g_object_new (GST_TYPE_REGISTRY, NULL);
     gst_object_ref_sink (GST_OBJECT_CAST (_gst_registry_default));
   }
   registry = _gst_registry_default;
--- a/gst/gstregistrychunks.c
+++ b/gst/gstregistrychunks.c
@@ -576,7 +576,7 @@
         plugin_name);
     return FALSE;
   }
-  if (G_UNLIKELY ((feature = g_object_newv (type, 0, NULL)) == NULL)) {
+  if (G_UNLIKELY ((feature = g_object_new (type, NULL)) == NULL)) {
     GST_ERROR ("Can't create feature from type");
     return FALSE;
   }
@@ -827,7 +827,7 @@
       *in);
   unpack_element (*in, pe, GstRegistryChunkPluginElement, end, fail);
 
-  plugin = g_object_newv (GST_TYPE_PLUGIN, 0, NULL);
+  plugin = g_object_new (GST_TYPE_PLUGIN, NULL);
 
   /* TODO: also set GST_PLUGIN_FLAG_CONST */
   GST_OBJECT_FLAG_SET (plugin, GST_PLUGIN_FLAG_CACHED);
--- a/gst/gsttask.c
+++ b/gst/gsttask.c
@@ -422,7 +422,7 @@
 
   g_return_val_if_fail (func != NULL, NULL);
 
-  task = g_object_newv (GST_TYPE_TASK, 0, NULL);
+  task = g_object_new (GST_TYPE_TASK, NULL);
   task->func = func;
   task->user_data = user_data;
   task->notify = notify;
--- a/gst/gsttaskpool.c
+++ b/gst/gsttaskpool.c
@@ -165,7 +165,7 @@
 {
   GstTaskPool *pool;
 
-  pool = g_object_newv (GST_TYPE_TASK_POOL, 0, NULL);
+  pool = g_object_new (GST_TYPE_TASK_POOL, NULL);
 
   return pool;
 }
--- a/gst/gsttracer.c
+++ b/gst/gsttracer.c
@@ -168,7 +168,7 @@
     return TRUE;
   }
 
-  factory = g_object_newv (GST_TYPE_TRACER_FACTORY, 0, NULL);
+  factory = g_object_new (GST_TYPE_TRACER_FACTORY, NULL);
   GST_DEBUG_OBJECT (factory, "new tracer factory for %s", name);
 
   gst_plugin_feature_set_name (GST_PLUGIN_FEATURE_CAST (factory), name);
--- a/gst/gsttracerrecord.c
+++ b/gst/gsttracerrecord.c
@@ -219,7 +219,7 @@
   }
   va_end (varargs);
 
-  self = g_object_newv (GST_TYPE_TRACER_RECORD, 0, NULL);
+  self = g_object_new (GST_TYPE_TRACER_RECORD, NULL);
   self->spec = structure;
   gst_tracer_record_build_format (self);
 
--- a/gst/gsttypefind.c
+++ b/gst/gsttypefind.c
@@ -70,7 +70,7 @@
 
   GST_INFO ("registering typefind function for %s", name);
 
-  factory = g_object_newv (GST_TYPE_TYPE_FIND_FACTORY, 0, NULL);
+  factory = g_object_new (GST_TYPE_TYPE_FIND_FACTORY, NULL);
   GST_DEBUG_OBJECT (factory, "using new typefind factory for %s", name);
 
   gst_plugin_feature_set_name (GST_PLUGIN_FEATURE_CAST (factory), name);
--- a/libs/gst/base/gstadapter.c
+++ b/libs/gst/base/gstadapter.c
@@ -239,7 +239,7 @@
 GstAdapter *
 gst_adapter_new (void)
 {
-  return g_object_newv (GST_TYPE_ADAPTER, 0, NULL);
+  return g_object_new (GST_TYPE_ADAPTER, NULL);
 }
 
 /**
--- a/libs/gst/base/gstdataqueue.c
+++ b/libs/gst/base/gstdataqueue.c
@@ -235,7 +235,7 @@
 
   g_return_val_if_fail (checkfull != NULL, NULL);
 
-  ret = g_object_newv (GST_TYPE_DATA_QUEUE, 0, NULL);
+  ret = g_object_new (GST_TYPE_DATA_QUEUE, NULL);
   ret->priv->checkfull = checkfull;
   ret->priv->checkdata = checkdata;
   ret->priv->fullcallback = fullcallback;
--- a/libs/gst/base/gstindex.c
+++ b/libs/gst/base/gstindex.c
@@ -304,7 +304,7 @@
 {
   GstIndex *index;
 
-  index = g_object_newv (gst_index_get_type (), 0, NULL);
+  index = g_object_new (gst_index_get_type (), NULL);
 
   return index;
 }
--- a/libs/gst/controller/gstinterpolationcontrolsource.c
+++ b/libs/gst/controller/gstinterpolationcontrolsource.c
@@ -665,7 +665,7 @@
 GstControlSource *
 gst_interpolation_control_source_new (void)
 {
-  return g_object_newv (GST_TYPE_INTERPOLATION_CONTROL_SOURCE, 0, NULL);
+  return g_object_new (GST_TYPE_INTERPOLATION_CONTROL_SOURCE, NULL);
 }
 
 static gboolean
--- a/libs/gst/controller/gstlfocontrolsource.c
+++ b/libs/gst/controller/gstlfocontrolsource.c
@@ -423,7 +423,7 @@
 GstControlSource *
 gst_lfo_control_source_new (void)
 {
-  return g_object_newv (GST_TYPE_LFO_CONTROL_SOURCE, 0, NULL);
+  return g_object_new (GST_TYPE_LFO_CONTROL_SOURCE, NULL);
 }
 
 static gboolean
--- a/libs/gst/controller/gsttriggercontrolsource.c
+++ b/libs/gst/controller/gsttriggercontrolsource.c
@@ -187,7 +187,7 @@
 GstControlSource *
 gst_trigger_control_source_new (void)
 {
-  return g_object_newv (GST_TYPE_TRIGGER_CONTROL_SOURCE, 0, NULL);
+  return g_object_new (GST_TYPE_TRIGGER_CONTROL_SOURCE, NULL);
 }
 
 static void
--- a/tests/check/gst/gstcontroller.c
+++ b/tests/check/gst/gstcontroller.c
@@ -231,7 +231,7 @@
 static GstTestControlSource *
 gst_test_control_source_new (void)
 {
-  return g_object_newv (GST_TYPE_TEST_CONTROL_SOURCE, 0, NULL);
+  return g_object_new (GST_TYPE_TEST_CONTROL_SOURCE, NULL);
 }
 
 static gboolean
--- a/tests/check/gst/gstelementfactory.c
+++ b/tests/check/gst/gstelementfactory.c
@@ -50,7 +50,7 @@
   GstPluginFeature *feature;
   GstElementFactory *factory;
 
-  feature = g_object_newv (GST_TYPE_ELEMENT_FACTORY, 0, NULL);
+  feature = g_object_new (GST_TYPE_ELEMENT_FACTORY, NULL);
   gst_plugin_feature_set_name (feature, "test");
 
   factory = GST_ELEMENT_FACTORY_CAST (feature);
